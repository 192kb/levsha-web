swagger: "2.0"
info:
  description: "Levsha is open small work listing project"
  version: "1.0.0"
  title: "Проект LEVSHA"
  contact:
    email: "v.tyrin@icloud.com"
  license:
    name: "MIT"
host: "levsha.192kb.ru"
basePath: "/api/v1"
tags:
  - name: "task"
    description: "Access to task orders"
  - name: "user"
    description: "Operations about user"
schemes:
  - "https"
  - "http"
paths:
  /task:
    get: 
      tags:
        - "task"
      summary: "Get list of tasks"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Server error"
    post:
      tags:
        - "task"
      summary: "Add a new task on board"
      description: ""
      operationId: "addTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Task object that needs to be added to the board"
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Task"
        
        405:
          description: "Invalid input"
      security:
        - levsha_auth:
            - "write:tasks"
    put:
      tags:
        - "task"
      summary: "Update an existing task"
      description: ""
      operationId: "updateTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Task object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
      security:
        - levsha_auth:
            - "write:tasks"
  /task/findByLocation/{location_id}:
    get:
      tags:
        - "task"
      summary: "Finds tasks by location"
      description: "Get list of first tasks by location id"
      operationId: "findTasksByLocation"
      produces:
        - "application/json"
      parameters:
        - name: "location_id"
          in: "path"
          description: "Id of queried location"
          type: "integer"
          required: true
        - name: "page"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: false
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        400:
          description: "Invalid status value"
  /task/category:
    get: 
      tags:
        - "task"
      summary: "Get list of tasks"
      operationId: "getTaskCategories"
      produces: 
        - "application/json"
      responses: 
        200:
          description: "Get list of existing task categories"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/TaskCategory'
    post:
      tags: 
        - "task"
      summary: "Create new task category"
      operationId: "createTaskCategory"
      produces: 
        - "application/json"
      parameters: 
        - in: "body"
          name: "body"
          description: "Create task category"
          required: true
          schema: 
            $ref: '#/definitions/TaskCategory'
      responses: 
        default:
          description: "successful operation"
      security: 
        - levsha_auth:
            - "write:task_category"
          
  /task/category/{task_category_id}:
    put:
      tags: 
        - "task"
      summary: "Update given task category"
      operationId: "updateTaskCategory"
      produces: 
        - "application/json"
      parameters: 
        - name: "task_category_id"
          in: "path"
          description: "Id of queried location"
          type: "integer"
          required: true
        - in: "body"
          name: "body"
          description: "Create task category"
          required: true
          schema: 
            $ref: '#/definitions/TaskCategory'
      responses: 
        default:
          description: "successful operation"
        404:
          description: "Not found"
      security: 
        - levsha_auth:
            - "write:task_category"
    delete:
      tags: 
        - "task"
      summary: "Removes given task category"
      operationId: "removeTaskCategory"
      parameters:
        - name: "task_category_id"
          in: "path"
          description: "Id of queried location"
          type: "integer"
          required: true
      responses:
        200:
          description: OK
      security: 
        - levsha_auth:
            - "write:task_category"
            
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user with privilegy."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  levsha_auth:
    type: "oauth2"
    authorizationUrl: "https://levsha.192kb.ru/oauth/dialog"
    flow: "implicit"
    scopes:
      write:tasks: "create tasks"
      delete:tasks: "delete tasks"
      write:user: "modify users"
      delete:user: "delete users"
      write:task_category: "create/update/delete task category"
      write:location: "create/update/delete location"
      write:message: "create message"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "number"
      firstname:
        type: "string"
      secondname:
        type: "string"
      lastname:
        type: "string"
      date_created:
        type: "string"
      last_change:
        type: "string"
      date_deleted:
        type: "string"
      is_deleted:
        type: "boolean"
      login:
        type: "string"
      password_hash:
        type: "string"
      phone:
        type: "string"
      email:
        type: "string"
      vk_profile:
        type: "string"
      ok_profile:
        type: "string"
      fb_profile:
        type: "string"
      ig_profile:
        type: "string"
      tw_profile:
        type: "string"
      yt_profile:
        type: "string"
      be_profile:
        type: "string"
      li_profile:
        type: "string"
      hh_profile:
        type: "string"
      phone_comfirmed:
        type: "boolean"
      email_confirmed:
        type: "boolean"
      photo_url:
        type: "string"
      location:
        $ref: '#/definitions/Location'
      starred_users:
        type: "array"
        items:
          $ref: '#/definitions/User'
      hidden_users:
        type: "array"
        items:
          $ref: '#/definitions/User'

  TaskCategory:
    type: "object"
    properties:
      id:
        type: "number"
      name:
        type: "string"
      sorting:
        type: "number"
      is_deprecated:
        type: "boolean"
        
  Task:
    type: "object"
    properties:
      id:
        type: "number"
      user:
        $ref: '#/definitions/User'
      date_created:
        type: "string"
      is_active:
        type: "boolean"
      title:
        type: "string"
      description:
        type: "string"
      price:
        type: "integer"
      have_constant_price:
        type: "boolean"
      date_start:
        type: "string"
      date_finish:
        type: "string"
      location:
        $ref: '#/definitions/Location'
      category: 
        $ref: '#/definitions/TaskCategory'
      photo:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "number"
            date_created:
              type: "string"
            date_delete:
              type: "string"
            is_deleted:
              type: "boolean"
            url:
              type: "string"
            task_id:
              type: "number"

  Message:
    type: "object"
    properties:
      id:
        type: "integer"
        required: ["true"]
      user_from:
        type: "integer"
        required: ["true"]
      user_to:
        type: "integer"
        required: ["true"]
      task_id:
        type: "integer"
      message:
        type: "string"
      date_created:
        type: "string"
      date_read:
        type: "string"
      is_deleted:
        type: "boolean"

  Notification:
    type: "object"
    properties:
      id:
        type: "number"
      user_id:
        type: "number"
      title:
        type: "string"
      message:
        type: "string"
      date_created:
        type: "string"
      date_read:
        type: "string"
      payload:
        type: "string"
      notification_type_id:
        type: "number"
        
  NotificationType:
    type: object
    properties:
      id:
        type: "number"
      name:
        type: "string"

  Region:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        
  City:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      region_id:
        type: "integer"
        
  Location:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      city_id:
        type: "integer"
        
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
